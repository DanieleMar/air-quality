{"version":3,"sources":["constant.js","logo.svg","service/api/api.js","service/api/apiClient.js","components/ListItem/index.js","App.js","reportWebVitals.js","index.js"],"names":["API_KEY","process","REACT_APP_GET_APP_KEY","fetchAirAxios","axios","create","method","baseURL","redirect","headers","common","what","region","city","a","url","getAirParams","country","key","state","params","response","data","console","log","ListItem","props","element","openRegion","len","num","onClick","App","useState","regions","setRegions","cities","setCities","setCity","showRegion","setShowRegion","lastRegion","setLastRegion","showCity","setShowCity","lastCity","setLastCity","getData","fetchData","undefined","current","className","Button","variant","pollution","aqius","value","valutation","giudizio","weather","tp","pr","hu","ws","length","map","el","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6efe63cc.chunk.js","sourcesContent":["export const GET_APP_KEY=process.env.REACT_APP_GET_APP_KEY // NOT WORK\r\nexport const API_KEY='8611e0d9-dd2d-4a04-bc9b-444f4ee2c4a2'\r\nexport const AIR_URL='https://api.airvisual.com/v2'","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { AIR_URL, API_KEY } from \"../../constant\";\r\nimport axios from \"axios\";\r\nimport apiClient from \"./apiClient.js\";\r\n\r\n//WITH FETCH\r\nconst chooseUrl = (what, region, city) => {\r\n  let url = \"\";\r\n\r\n  switch (what) {\r\n    case \"regions\": {\r\n      url = `${AIR_URL}/states?country=Italy&key=${API_KEY}`; // get a list of supported regions\r\n      break;\r\n    }\r\n    case \"list-cities\": {\r\n      url = `${AIR_URL}/cities?state=${region}&country=Italy&key=${API_KEY}`; //get a list of cities supported for a specific region\r\n      break;\r\n    }\r\n    case \"specific-city\": {\r\n      url = `${AIR_URL}/city?city=${city}&state=${region}&country=Italy&key=${API_KEY}`; // get info for a specific scity\r\n      break;\r\n    }\r\n    default:\r\n      break;\r\n  }\r\n  return url;\r\n};\r\n\r\nexport const getAir = async (what, region, city) => {\r\n  try {\r\n    let requestOptions = {\r\n      method: \"GET\",\r\n      redirect: \"follow\",\r\n    };\r\n    const url = chooseUrl(what, city, region);\r\n    const response = await fetch(url, requestOptions);\r\n    const data = await response.json();\r\n\r\n    return data;\r\n  } catch (err) {\r\n    console.log(\"Errore\"); // TypeError: failed to fetch\r\n  }\r\n};\r\n\r\n//WITH AXIOS\r\nexport const fetchAirAxios = async (what, region, city) => {\r\n\r\n  try {\r\n    let url= \"\";\r\n    let getAirParams ={}\r\n    switch (what) {\r\n      case \"regions\": {\r\n        url='/states'\r\n        getAirParams= {\r\n        country: \"Italy\",\r\n        key: API_KEY}\r\n        break;\r\n      }\r\n      case \"list-cities\": {\r\n        url='/cities'\r\n        getAirParams= {\r\n          state: region,\r\n          country: \"Italy\",\r\n          key: API_KEY}\r\n        break;\r\n      }\r\n      case \"specific-city\": {\r\n        url='/city'\r\n        getAirParams= {city: city,\r\n          state: region,\r\n          country: \"Italy\",\r\n          key: API_KEY}\r\n        break;\r\n      }\r\n      default:\r\n        break;\r\n    }\r\n\r\n    //WITHOUT AXIOS CLIENT\r\n    const response = await axios({\r\n      method: \"GET\",\r\n      baseURL: \"https://api.airvisual.com/v2/\",\r\n      url: url,\r\n      params: getAirParams,\r\n      redirect: \"follow\",\r\n      // headers: {'Access-Control-Allow-Origin' : '*',\r\n      // 'Access-Control-Allow-Methods':'GET,PUT,POST,DELETE,PATCH,OPTIONS'}\r\n    });\r\n\r\n\r\n    /// with AXIOS CLIENT\r\n\r\n    // const response = await apiClient.get(url, {params:getAirParams})\r\n\r\n\r\n\r\n    const data = await response.data;\r\n    return data.data;\r\n  } catch (err) {\r\n    console.log(\"Errore\"); // TypeError: failed to fetch\r\n  }\r\n};\r\n\r\n","import axios from \"axios\";\r\n\r\n\r\nexport default axios.create({\r\n\r\n  method: \"GET\",\r\n  baseURL: \"https://api.airvisual.com/v2/\",\r\n  redirect: \"follow\",\r\n  headers: {\r\n    \"Access-Control-Allow-Origin\":\"*\",\r\n    \"access-control-allow-headers\": \"Origin, X-Requested-With, Content-Type, Accept\",\r\n    common: { \"Content-Type\": \"application/json\" },\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\n\r\n\r\nexport default function ListItem(props) {\r\n\r\n  const { element, openRegion, len, num} = props;\r\n  return <> <span onClick={openRegion}>{element}</span> {num<len-1 && <span>&diams;</span>}</>;\r\n}\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { getAir, fetchAirAxios } from \"./service/api/api.js\";\nimport ListItem from \"./components/ListItem\";\nimport { useEffect, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Search from \"./components/searchBox/index.js\";\n\nfunction App() {\n  const [regions, setRegions] = useState([]);\n  const [cities, setCities] = useState([]);\n  const [city, setCity] = useState({});\n  const [showRegion, setShowRegion] = useState(false);\n  const [lastRegion, setLastRegion] = useState(\"Nessuna\");\n  const [showCity, setShowCity] = useState(false);\n  const [lastCity, setLastCity] = useState(\"\");\n\n  const getData = async (what, region, city) => {\n    //fetch data\n    const data = await fetchData(what, region, city);\n    if (data !== undefined) {\n      if (what === \"regions\") {\n        setShowRegion(true);\n        setRegions(data);\n      } else if (what === \"list-cities\") {\n        setShowRegion(false);\n\n        setLastRegion(region); //save the region for the specific-city param\n        setShowCity(false); //avoid showing data of previous city (after select region) when user repeat a selection\n        setCities(data);\n        setRegions([]);\n      } else if (what === \"specific-city\") {\n        setCity(data.current);\n        setLastCity(city);\n        setCities([]);\n        setShowCity(true);\n      }\n    }\n  };\n\n\n  // Fetch Data with Axios and Await\n  const fetchData = async (what, region, city) => {\n    ////HOW TO GET VALUES FROM PROMISE SUCCESS\n    const fetchData = await fetchAirAxios(what, region, city)\n    const data = await fetchData  \n    return data;\n  };\n  const giudizio = (value) => {\n    let valutation = \"\";\n    switch (true) {\n      case value <= 50:\n        valutation = \"Buona\";\n        break;\n\n      case value > 50 && value <= 100:\n        valutation = \"Moderata\";\n        break;\n      case value > 100 && value <= 150:\n        valutation = \"Buona\";\n        break;\n      case value > 150 && value <= 200:\n        valutation = \"Dannosa\";\n        break;\n      case value > 200 && value <= 300:\n        valutation = \"Pericolosa\";\n        break;\n      case value > 300 && value <= 500:\n        valutation = \"Molto pericolosa\";\n        break;\n      default:\n        valutation = \"\";\n        break;\n    }\n    return valutation;\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        {\" \"}\n        <h1>Air Quality</h1>{\" \"}\n        <h2>Scopri la qualità dell'aria per molte città italiane</h2>{\" \"}\n      </header>\n      <section>\n        {/* <Search /> */}\n        <section>\n          <Button variant=\"primary\" onClick={() => getData(\"regions\")}>\n            Select a Region\n          </Button>{\" \"}\n        </section>\n      </section>\n\n      {!showRegion && !showCity && (\n        <div> Regione selezionata: {lastRegion} </div>\n      )}\n      {!showRegion && showCity && city !== undefined && (\n        <>\n          <h3>{lastCity}</h3>\n          <div>Qualità dell'aria: {city.pollution.aqius} U.S. AQI </div>\n          <div>Giudizio: {giudizio(city.pollution.aqius)}</div>\n          <br></br>\n          <div>Temperatura: {city.weather.tp} °C</div>\n          <div>Pressione atmosferica: {city.weather.pr} hPa</div>\n          <div>Umidità: {city.weather.hu} %</div>\n\n          <div>Velocità del vento: {city.weather.ws} (m/s)</div>\n          {/* <div>Icona: {city.weather.ic} </div> */}\n        </>\n      )}\n\n      {!showRegion &&\n        cities !== undefined &&\n        cities.length > 0 && //showed list of cities after the list of regions\n        cities.map((el, index) => {\n          return (\n            <ListItem\n              key={index}\n              num={index} //to avoid last rhombus simbol\n              element={el.city}\n              openRegion={() => getData(\"specific-city\", lastRegion, el.city)}\n              len={cities.length} //to avoid last rhombus simbol\n            />\n          );\n        })}\n      {showRegion &&\n        regions !== undefined &&\n        regions.length > 0 &&\n        regions.map((el, index) => {\n          return (\n            <ListItem\n              key={index}\n              num={index} //to avoid last rhombus simbol\n              element={el.state}\n              openRegion={() => getData(\"list-cities\", el.state)}\n              len={regions.length} //to avoid last rhombus simbol\n            />\n          );\n        })}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}